#include <stdio.h>
#include <stdlib.h>

#include "htable.h"

struct htablerec {
    int capacity;
    int num_keys;
    int *keys;
    int *frequencies;
};

void *emalloc(size_t s) {
    void *result = malloc(s);
    if (NULL == result) {
        fprintf(stderr, "Memory allocation failed!\n");
        exit(EXIT_FAILURE);
    }
    return result;
}

htable htable_new(int capacity) {
    int i;
    
    htable result = emalloc(sizeof *result);
    result -> capacity = 11;
    result -> numkeys = 0;
    /* result -> frequencies = int a[result->capacity]; */
    result -> frequencies = emalloc(result->capacity * sizeof result->frequencies[0])
    result -> keys = emalloc(result->capacity * sizeof result->keys[0]);

    for (i = 0; i <= f->capacity; i++){
        result -> keys[i] = 0;
        result -> frequencies[i] = 0;
    }
    
    return result;
}

int htable_insert(htable h, char *keys) {
    static unsigned int htable_word_to_int(char *word) {
        unsigned int result = 0;
        
        while (*word != ’\0’) {
            result = (*word++ + 31 * result);
        }
        return result;
    }
    
}

void htable_print(htable h, FILE *stream) {
    /* a "for" loop to print out each cell of f->items */
    int i;
    for (i = 0; i < f->itemcount; i++){
        printf("%d\n", f->items[i]);
    }
}

void htable_free(htable h) {
    /* free the memory associated with the flexarray */
    free(f->items);
    free(f);
}
